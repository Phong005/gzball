package com.android.app.imageManager;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemSelectedListener;

public class ImageManager extends Activity {
	
    private static final int ACTIVITY_CREATE=0;
    private static final int ACTIVITY_EDIT=1;
	
	// Variables for menu access
	private static final int ADD_COMMENT_ID = Menu.FIRST;
    private static final int DELETE_ID = Menu.FIRST + 1;
	
    private NotesDbAdapter mDbHelper;
    
    
	private Gallery gallery;
	
	private ImageView imageView;
	
	private TextView textView;
	
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		
		// Reference the Gallery view
		gallery = (Gallery) findViewById(R.id.gallery);
		
		// Reference the Image view
		imageView = (ImageView) findViewById(R.id.image);
		
		// Reference the Text view
		textView = (TextView) findViewById(R.id.title);
		
		
		// Set the adapter to our custom adapter (below)
		gallery.setAdapter(new ImageAdapter(this));

		// Set a item click listener, and just Toast the clicked position
		gallery.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				Bitmap image = (Bitmap) gallery.getSelectedItem();
				imageView.setImageBitmap(image);
				String title = "Filename : " + ((ImageAdapter) gallery.getAdapter()).getFileNameAtPosition(position)
				+ "\nDescription : ";
				textView.setText(title);

			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				imageView.setImageBitmap(null);
				textView.setText(null);

			}

			//		 public void onItemClick(AdapterView parent, View v, int position,
			//		 long id) {
			//		 Toast.makeText(this, "" + position, Toast.LENGTH_SHORT).show();
			//		 }



		});

		mDbHelper = new NotesDbAdapter(this);
		mDbHelper.open();

		registerForContextMenu(gallery);

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		menu.add(0, ADD_COMMENT_ID, 0, R.string.menu_add_comment);
		menu.add(0, DELETE_ID, 0,  R.string.menu_delete);
		return true;
	}

	@Override
	public boolean onMenuItemSelected(int featureId, MenuItem item) {
		switch(item.getItemId()) {
		case ADD_COMMENT_ID:
			createNote();
			return true;
		case DELETE_ID:
//			mDbHelper.deleteNote(getListView().getSelectedItemId());
//			fillData();
			return true;
		}

		return super.onMenuItemSelected(featureId, item);
	}

	/**
	 * 
	 */
	private void createNote() {
		Intent i = new Intent(this, DescriptionAdder.class);
		//String id = selectedFileNameHashcode();
		//i.putExtra(NotesDbAdapter.KEY_ROWID, id );
		startActivityForResult(i, ACTIVITY_CREATE);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode,
            Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		String desc = data.getExtras().getString("description"); 
		saveState(desc);

    }
	
	
    private void saveState(String description) {
        String title = ((ImageAdapter) gallery.getAdapter()).getFileNameAtPosition(gallery.getSelectedItemPosition());
        
        mDbHelper.createNote(title, description);

    }
	
	
    
    @Override
    protected void onPause() {
        super.onPause();
//        saveState();
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        populateFields();
    }
    
    private void populateFields() {
//        if (mRowId != null) {
//            Cursor note = mDbHelper.fetchNote(mRowId);
//            startManagingCursor(note);
//            mTitleText.setText(note.getString(
//    	            note.getColumnIndexOrThrow(NotesDbAdapter.KEY_TITLE)));
//            mBodyText.setText(note.getString(
//                    note.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)));
//        }
    }
    
    
    private void fillData() {
        Cursor notesCursor = mDbHelper.fetchAllNotes();
        startManagingCursor(notesCursor);
        
        // Create an array to specify the fields we want to display in the list (only TITLE)
        String[] from = new String[]{NotesDbAdapter.KEY_FILENAME};
        
        // and an array of the fields we want to bind those fields to (in this case just text1)
      //  int[] to = new int[]{R.id.text1};
        
        // Now create a simple cursor adapter and set it to display
//        SimpleCursorAdapter notes = 
//        	    new SimpleCursorAdapter(this, R.layout.notes_row, notesCursor, from, to);
//        setListAdapter(notes);
    }

	
	
	



}